// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package structure

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SzGObject struct {
	_tab flatbuffers.Table
}

func GetRootAsSzGObject(buf []byte, offset flatbuffers.UOffsetT) *SzGObject {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SzGObject{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSzGObject(buf []byte, offset flatbuffers.UOffsetT) *SzGObject {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SzGObject{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SzGObject) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SzGObject) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SzGObject) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SzGObject) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SzGObject) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SzGObject) Pos(obj *SzVector2) *SzVector2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SzVector2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SzGObject) Radius() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SzGObject) MutateRadius(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *SzGObject) CollisionArea(obj *SzRectangle) *SzRectangle {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(SzRectangle)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SzGObjectStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func SzGObjectAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func SzGObjectAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func SzGObjectAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(pos), 0)
}
func SzGObjectAddRadius(builder *flatbuffers.Builder, radius int32) {
	builder.PrependInt32Slot(3, radius, 0)
}
func SzGObjectAddCollisionArea(builder *flatbuffers.Builder, collisionArea flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(collisionArea), 0)
}
func SzGObjectEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
